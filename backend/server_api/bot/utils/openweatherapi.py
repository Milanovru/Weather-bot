import requests
from environs import Env
import time


class OpenweatherApi():
    '''–ö–ª–∞—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API https://openweathermap.org'''
    env = Env()
    env.read_env()

    token = env('OPENWEATHER_KEY')

    
    async def get_weather(self, lat, lon):
        '''–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å data —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'''
        r = requests.get(
            f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={self.token}&units=metric')
        json_data = r.json()
        mon = self.__replace_month(time.gmtime(json_data['sys']['sunrise'])[1])
        data = {
            'main_weather': json_data['weather'][0]['main'],
            'description_weather': json_data['weather'][0]['description'],
            'icon_weather': json_data['weather'][0]['icon'],
            'temperature' : json_data['main']['temp'],
            'feels_like_temperature' : json_data['main']['feels_like'],
            'humidity' : json_data['main']['humidity'],
            'wind_speed' : json_data['wind']['speed'],
            'year': time.gmtime(json_data['sys']['sunrise'])[0],
            'mon': mon,
            'day' : time.gmtime(json_data['sys']['sunrise'])[2],
            'sunrise_time' : str(time.gmtime(json_data['sys']['sunrise'])[
                            3] + 3) + ':' + str(time.gmtime(json_data['sys']['sunrise'])[4]),
            'sunset_time' : str(time.gmtime(json_data['sys']['sunset'])[
                            3] + 3) + ':' + str(time.gmtime(json_data['sys']['sunset'])[4]),
            'current_time' : str(time.gmtime(time.time())[
                            3]+3) + ':' + str(time.gmtime(time.time())[4])
        }
        return data    
    
    
    async def get_weather_48h(self, lat, lon):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å data —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ 48 —á–∞—Å–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'''
        r = requests.get(
            f'http://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=current,minutely,daily,alerts&appid={self.token}&units=metric')
        json_data = r.json()
        data = {
            'temp': [(i['temp']) for i in json_data['hourly']],
            'feels_like': [i['feels_like'] for i in json_data['hourly']],
            'main': [i['weather'][0]['main'] for i in json_data['hourly']],
            'description': [i['weather'][0]['description'] for i in json_data['hourly']],
            'mon': [self.__replace_month(time.gmtime(i['dt'])[1])for i in json_data['hourly']],
            'day': [time.gmtime(i['dt'])[2] for i in json_data['hourly']],
            'hour': [(time.gmtime(i['dt'])[3] + 3) for i in json_data['hourly']]
        }
        return self.__parse_mode_dict(data)

    
    async def get_alert_weather(self, lat, lon):
        '''–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: lat, lon - –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API, telegram-id –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é alert_messages'''
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=minutely,hourly,daily,alerts&appid={self.token}&units=metric&lang=ru')
        json_data = r.json()
        weather_id = str(json_data['current']['weather'][0]['id'])
        weather_description = json_data['current']['weather'][0]['description']
        # –µ—Å–ª–∏ –ø–æ–≥–æ–¥–∞ == –¥–æ–∂–¥—å, —Å–Ω–µ–≥, –≥—Ä–æ–∑–∞ –∏–ª–∏ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if weather_id.startswith('2') or weather_id.startswith('3') or weather_id.startswith('5') or weather_id.startswith('6') or weather_id.startswith('7'):
            return weather_description
            

    def __replace_month(self, month):
        if month == 1:
            return '—è–Ω–≤–∞—Ä—è'
        elif month == 2:
            return '—Ñ–µ–≤—Ä–∞–ª—è'
        elif month == 3:
            return '–º–∞—Ä—Ç–∞'
        elif month == 4:
            return '–∞–ø—Ä–µ–ª—è'
        elif month == 5:
            return '–º–∞—è'
        elif month == 6:
            return '–∏—é–Ω—è'
        elif month == 7:
            return '–∏—é–ª—è'
        elif month == 8:
            return '–∞–≤–≥—É—Å—Ç–∞'
        elif month == 9:
            return '—Å–µ–Ω—Ç—è–±—Ä—è'
        elif month == 10:
            return '–æ–∫—Ç—è–±—Ä—è'
        elif month == 11:
            return '–Ω–æ—è–±—Ä—è'
        elif month == 12:
            return '–¥–µ–∫–∞–±—Ä—è'
        else:
            return None


    def __parse_mode_dict(self, data: dict):
        tmp = []
        day_tmp = None
        month_tmp = None
        for temp, month, day, hour, description, main in zip(
            data.get('temp'), data.get('mon'), data.get('day'), data.get('hour'), data.get('description'), data.get('main')
            ):
            unicode = self.__description_unicode(main, description)
            month_tmp = month
            day_tmp = day
            # –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –¥–∞—Ç—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –¥–Ω—è
            if day == day_tmp and month == month_tmp:
                # –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç 00 —á–∞—Å–æ–≤
                if hour % 24 == 0:
                    s = f'<b>{day + 1}</b> <b>{month}</b>\n<b>{hour % 24}:00</b> {unicode} <b>{int(temp)}</b>‚ÑÉ'
                    tmp.append(s)
                # –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è
                else:
                    s = f'<b>{hour % 24}:00</b> {unicode} <b>{int(temp)}</b>‚ÑÉ'
                    month_tmp = month
                    day_tmp = day
                    tmp.append(s)
        return tmp


    def __description_unicode(self, group, subgroup):
        if group.lower() == 'thunderstorm':
            return '‚õàÔ∏è'
        elif group.lower() == 'drizzle':
            return 'üå¶'
        elif group.lower() == 'rain':
            return 'üåß'
        elif group.lower() == 'snow':
            return 'üå®'
        elif group.lower() == 'clear':
            return '‚òÄ'
        elif group.lower() == 'clouds':
            if subgroup.lower() == 'few clouds':
                return 'üå§'
            elif subgroup.lower() == 'broken clouds':
                return 'üå•'
            else:
                return '‚òÅ'
        else:
            return None
